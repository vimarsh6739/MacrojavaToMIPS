//
// Generated by JTB 1.3.2
//
/**
 * @author Vimarsh Sathia
 * @version 7.0
 */
package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * We assume that the input minijava program is already type checked
 */

class SymbolTable
{
   HashMap<String,ClassTable> cList;
   
   int scope;//current scope
   ClassTable currClass;//current class
   FunctionTable currFun;//current function
   
   HashMap<String,Boolean> flagMap;
   int temp_cnt=0;
   int label_cnt=0;
   
   HashMap<String,String> tempType;

   SymbolTable(){
      cList = new HashMap<String,ClassTable>();
      flagMap = new HashMap<String,Boolean>();
      tempType = new HashMap<String,String>();
      scope=0;
      currClass=null;
      currFun=null;
   }
   
   //newTemp is local to a function
   String newTemp(){ return "%_" + Integer.toString(temp_cnt++); }
   
   //Labels are considered global
   String newLabel(){ return "l" + Integer.toString(label_cnt++);}

   //Add default class
   void addClass(String cname){
      ClassTable obj = new ClassTable(cname);
      flagMap.put(cname,false);
      cList.put(cname, obj);
   }

   void addClass(String cname, String pname)
   {
      ClassTable obj = new ClassTable(cname,pname);
      flagMap.put(cname,false);
      cList.put(cname,obj);
   }
   
   void setCurrClass(String cname){ scope = 1; currClass = cList.get(cname);   }
   void unsetCurrClass(){scope=0;  currClass=null;}
   
   void setCurrFn(String fname){ scope = 2; currFun = currClass.cFnList.get(fname); }
   void unsetCurrFn(){ 
      this.scope=1; 
      this.temp_cnt = 0; 
      this.tempType.clear();
      this.currFun=null;
   }
   
   ArrayList<String> recAppendVTable(String cname)
   {  
      ClassTable c_obj = cList.get(cname);
      
      if(c_obj.parentName.equals("")){
         return c_obj.getVtable();
      }
      else if(flagMap.get(cname)==true){
         return c_obj.getVtable();
      }
      else{
         ArrayList<String> vtab_parent = recAppendVTable(c_obj.parentName);
         ArrayList<String> vtab_child = c_obj.getVtable();
         
         for(int i=0;i<vtab_child.size();++i){
            boolean occursCheck=false;
            String fnInChild = vtab_child.get(i);
            fnInChild = fnInChild.substring(fnInChild.indexOf('.') + 1);

            for(int j=0;j<vtab_parent.size();++j){
               String fnInParent = vtab_parent.get(j);//what the fuck
               fnInParent = fnInParent.substring(fnInParent.indexOf('.') + 1);
               if(fnInChild.equals(fnInParent)){
                  //replace string and break
                  vtab_parent.set(j,vtab_child.get(i));
                  occursCheck=true;
                  break;
               }
            }   

            if(!occursCheck){
               //not overriding-append to the end of the list
               vtab_parent.add(vtab_child.get(i));
            }
         }

         return vtab_parent;
      }
      
   }

   //Choice is for appending types
   ArrayList<String> recAppendFieldTable(String cname,int choice){
      
      ClassTable c_obj = cList.get(cname);

      if(c_obj.parentName.equals("")){
         if(choice==1)return c_obj.getFieldTable(1);
         else return c_obj.getFieldTable(2);
      }
      else if(flagMap.get(cname)==true){
         if(choice==1)return c_obj.getFieldTable(1);
         else return c_obj.getFieldTable(2);
      }
      else{
         ArrayList<String> field_parent = recAppendFieldTable(c_obj.parentName,choice);
         ArrayList<String> field_child = c_obj.getFieldTable(choice);

         for(int i=0;i<field_child.size();++i){
            field_parent.add(field_child.get(i));            
         }

         return field_parent;
      }
   }

   void resetFlags(){
      Iterator it = flagMap.entrySet().iterator();
      while(it.hasNext()){
         Map.Entry<String, Boolean> pair = (Map.Entry<String,Boolean>) it.next();
         flagMap.replace(pair.getKey(),true,false);
      }
   }

   void appendTables(){
      //Recursively append tables of all the related classes
      Iterator it = cList.entrySet().iterator();

      //Append vtables
      while (it.hasNext())
      {
         Map.Entry<String, ClassTable> pair = (Map.Entry<String,ClassTable>) it.next();
         ArrayList<String> vtable_new = this.recAppendVTable(pair.getKey());
         pair.getValue().putVTable(vtable_new);
         flagMap.replace(pair.getKey(),false,true);
         
         /* System.out.println("~~~~~~~" + pair.getKey() + "~~~~~~~~~~");
         for(int i=0;i<pair.getValue().vtable.size();++i){
            System.out.println(pair.getValue().vtable.get(i));
         }  */ 
      }

      resetFlags();
      it = cList.entrySet().iterator();
      
      //Append global fields
      while(it.hasNext()){
         Map.Entry<String, ClassTable> pair = (Map.Entry<String,ClassTable>) it.next();
         ArrayList<String> cfield_new = this.recAppendFieldTable(pair.getKey(),1);
         ArrayList<String> cfieldType_new = this.recAppendFieldTable(pair.getKey(),2);
         
         pair.getValue().putField(cfieldType_new,cfield_new);
         flagMap.replace(pair.getKey(),false,true);
      }
      resetFlags();
      
      //Update the final offset arrays for all class fields
      it = cList.entrySet().iterator();

      while(it.hasNext()){
         Map.Entry<String, ClassTable> pair = (Map.Entry<String,ClassTable>) it.next();
         pair.getValue().updateFieldOffsetArray();
      }

   }

   void printVTable(){
      //Prints all constructed vtables in llvm format
      cList.forEach( (cname,ctb) ->{
         System.out.print("@."+cname+"_vtable = global ");
         System.out.print("[" + ctb.vtable.size() + " x i8*] [");
         int delim=ctb.vtable_size;
         for(String cnf: ctb.vtable){
            String cn = cnf.substring(0, cnf.indexOf('.'));
            String func = cnf.substring(cnf.indexOf('.')+1);
            System.out.print("i8* bitcast (");
            //print the function signature-> rtype (args) * @cn.func to i8*
            String ret = ""; 
            switch(cList.get(cn).cFnList.get(func).rtype){
               case "int":    ret = "i32";break;
               case "boolean":ret = "i1";break;
               case "int[]":  ret = "i32*";break;
               default:ret = "i8*";
            }
            String args = cList.get(cn).getArgsType(func);
            System.out.print(ret + " (" + args + ")* @" + cn + "." + func + " to i8*)");
            if(--delim > 0 )System.out.print(", ");
         }
         System.out.print("] \n");
      });
   }

   String getReturnType(String cname, String fname){
      //We know for sure the function is present in given class or ancestor
      ClassTable c_obj  = cList.get(cname);
      if(c_obj.cFnList.containsKey(fname)){
         return c_obj.cFnList.get(fname).rtype;
      }
      else{
         return getReturnType(c_obj.parentName, fname);
      }
   }

}

class ClassTable
{

   ArrayList<String> vtable;
   HashMap<String,FunctionTable> cFnList;
   ArrayList<String> cField;
   ArrayList<String> cFieldType;
   ArrayList<Integer> cFieldOffset;
   String className;
   String parentName;

   int vtable_size;
   int classtable_size;
   int cTableByteSize;

   ClassTable(){
      className = "";
      parentName = "";
   }

   ClassTable(String cname){
      className = cname;
      parentName = "";
      vtable = new ArrayList<String>();
      cFnList = new HashMap<String,FunctionTable>();
      cField = new ArrayList<String>();
      cFieldType = new ArrayList<String>();
      cFieldOffset = new ArrayList<Integer>();
      vtable_size = classtable_size = cTableByteSize =  0;
   }

   ClassTable(String cname,String pname){
      className = cname;
      parentName = pname;
      vtable = new ArrayList<String>();
      cFnList = new HashMap<String,FunctionTable>();
      cField = new ArrayList<String>();
      cFieldType = new ArrayList<String>();
      cFieldOffset = new ArrayList<Integer>();
      vtable_size = classtable_size = cTableByteSize =  0;
   }

   ArrayList<String> getVtable(){
      //return a deep copy of vtable
      ArrayList<String> vtable_cp = new ArrayList<String>();
      for(int i=0;i<this.vtable.size();++i){
         vtable_cp.add(this.vtable.get(i));
      }
      return vtable_cp;
   }

   ArrayList<String> getFieldTable(int choice){
      //return a deep copy of the tables
      if(choice==1){
         ArrayList<String> field_cp = new ArrayList<String>();
         for(int i=0;i<this.cField.size();++i){
            field_cp.add(this.cField.get(i));
         }
         return field_cp;
      }
      else {
         ArrayList<String> field_cp = new ArrayList<String>();
         for(int i=0;i<this.cFieldType.size();++i){
            field_cp.add(this.cFieldType.get(i));
         }
         return field_cp;
      }
   }
   
   //Add superclass fields-modify classtable_size
   void putField(ArrayList<String> type,ArrayList<String> val){
      this.cField = new ArrayList<String>();
      this.cFieldType = new ArrayList<String>();
      for(int i=0;i<val.size();++i){
         this.cField.add(val.get(i));
      }
      for(int i=0;i<type.size();++i){
         this.cFieldType.add(type.get(i));
      }
      this.classtable_size = 1 + type.size();
   }

   //Add superclass functions-modify vtable_size
   void putVTable(ArrayList<String> vtable){
      this.vtable = new ArrayList<String>();
      for(int i=0;i<vtable.size();++i){
         this.vtable.add(vtable.get(i));
      }
      this.vtable_size = vtable.size();
   }

   void insertField(String type,String id){
      cFieldType.add(type);
      cField.add(className + "." + id);
   }

   void addFunction(String rtype, String fname){
      FunctionTable obj = new FunctionTable(fname,rtype,className);
      cFnList.put(fname,obj);
      vtable.add(className+"." +fname);
   }

   int getFieldIndexOffset(String id){

      //Get the offset of requested field from the offset arraylist
      int offset= -1;
      //Iterate in reverse to account for variable shadowing
      for(int i = cField.size()-1;i>=0;--i){
         String var = this.cField.get(i);
         var = var.substring(var.indexOf('.') + 1);
         if(id.equals(var)){offset = cFieldOffset.get(i);break;}
      }

      //System.out.println("Offset for " + id + "::" + off);
      if(offset == -1){
         System.out.println(id + ": 'a not in scope of class " + this.className);
         System.exit(0);
      }

      return offset;
   }

   int getVTableOffset(String fname){
      
      int offset=-1;
      for(int i=0;i<vtable.size();++i){
         String entry = vtable.get(i);
         entry = entry.substring(entry.indexOf('.')+1);
         if(entry.equals(fname)){ offset = i; break; }
      }

      if(offset == -1){
         System.out.println(fname + " : <fun> not in scope of class " + this.className);
         System.exit(0);
      }

      return offset;
   }

   String getType(String id){

      int ind = 1;
      for(int i=cField.size()-1;i>=0;--i){
         String str = cField.get(i);
         str = str.substring(str.indexOf('.')+1);
         if(id.equals(str)){
            ind = i;
            break;
         }
      }

      return cFieldType.get(ind);
   }

   String getVTableClassAt(int offset){
      String str = vtable.get(offset);
      return str.substring(0,str.indexOf('.'));
   }

   String getArgsType(String fname){
      String at = "";
      int delim = cFnList.get(fname).fArgType.size();
      for(String argi:cFnList.get(fname).fArgType){
         switch(argi){
            case "int":at = at + "i32";break;
            case "boolean":at = at + "i1";break;
            case "int[]":at = at + "i32*";break;
            default:at = at + "i8*";
         }
         if(--delim>0)at = at + ",";
      }
      return at;
   }

   void updateFieldOffsetArray(){
      this.cFieldOffset = new ArrayList<>();
      int start = 8;
      for(int i = 0;i < this.cFieldType.size(); ++i){
         this.cFieldOffset.add(Integer.valueOf(start));
         
         switch(this.cFieldType.get(i)){
            case "boolean":
            start+=1;
            break;
            case "int": 
            start+=4;
            break;
            case "int[]":
            start+=8;
            break;
            default:
            start+=8;
         }
      }
      this.cTableByteSize = start;
      //System.out.println("Class " + this.className + " has size " + this.cTableByteSize);
   }
}

class FunctionTable
{
   ArrayList<String> fArg;
   ArrayList<String> fArgType;
   ArrayList<String> fField;
   ArrayList<String> fFieldType;

   String className;
   String functionName;
   String rtype;
   int N_args;
   int N_fields;

   FunctionTable(){}

   FunctionTable(String fname, String rtype,String className){
      functionName = fname;
      this.rtype = rtype;
      this.className = className;
      fArg = new ArrayList<String>();
      fArgType = new ArrayList<String>();
      fField = new ArrayList<String>();
      fFieldType = new ArrayList<String>();
      fArg.add("%this");
      fArgType.add(className);
      N_args=1;
      N_fields=0;
   }

   void insertField(String type,String id){
      fField.add(id);
      fFieldType.add(type);
      N_fields++;
   }

   void addFunctionArgument(String type,String id){
      fArg.add(id);
      fArgType.add(type);
      N_args++;
   }

   int getNumberArgs(){return fArg.size();}
   boolean isMember(String id){return (fArg.contains(id) || fField.contains(id));}

   int getFieldIndexTemp(String id){
      //returns the index of element containing id
      //always returns a value
      boolean flag = false;
      int ans = 0;

      for(int i=0;i<N_args;++i){
         if(fArg.get(i).equals(id)){
            flag=true;
            ans = i;
            break;
         }
      }
      if(flag){
         return ans;
      }else{

         for(int i=0;i<N_fields;++i){
            if(fField.get(i).equals(id)){
               flag=true;
               ans = i + N_args;
               break;
            }
         }

         return ans;
      }
   }

   String getType(String id){
      
      boolean flag = false;
      if(fArg.contains(id)){ return fArgType.get(fArg.indexOf(id)); }
      else{ return fFieldType.get(fField.indexOf(id)); }
      /* int ind = 0;

      for(int i=0;i<N_args;++i){
         if(fArg.get(i).equals(id)){
            flag=true;
            ind = i;
            break;
         }
      }
      if(flag){
         return fArgType.get(ind);
      }else{

         for(int i=0;i<N_fields;++i){
            if(fField.get(i).equals(id)){
               flag=true;
               ind = i;
               break;
            }
         }

         return fFieldType.get(ind);
      } */
   } 

}

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   //Initialize the symbol table
   SymbolTable T = new SymbolTable();

   //Store arguments of a method
   ArrayList<String> farg = new ArrayList<String>();
   ArrayList<String> fargtype = new ArrayList<String>();

   //Variable to store the type of a primary expression
   String pexpr_type = "";

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   //Return the name of the identifier
   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //Provide definitions for basic functions
   public void printBasicInfo(){
      System.out.println();
      System.out.println("declare i8* @calloc(i32, i32)");
      System.out.println("declare i32 @printf(i8*, ...)");
      System.out.println("declare void @exit(i32)\n");

      System.out.println("@_cint = constant [4 x i8] c\"%d\\0a\\00\"");
      System.out.println("@_cOOB = constant [15 x i8] c\"Out of bounds\\0a\\00\"\n");

      System.out.println("define void @print_int(i32 %i) {");
      System.out.println("\t%_str = bitcast [4 x i8]* @_cint to i8*");
      System.out.println("\tcall i32 (i8*, ...) @printf(i8* %_str, i32 %i)");
      System.out.println("\tret void");
      System.out.println("}");
      System.out.println("");
      System.out.println("define void @throw_oob() {");
      System.out.println("\t%_str = bitcast [15 x i8]* @_cOOB to i8*");
      System.out.println("\tcall i32 (i8*, ...) @printf(i8* %_str)");
      System.out.println("\tcall void @exit(i32 1)");
      System.out.println("\tret void");
      System.out.println("}");
   }

   //
   // User-generated visitor methods below
   //
   
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      
      R _ret=null;

      //Build symbol tables
      n.f0.accept(this, (A)"one");
      n.f1.accept(this, (A)"one");
      n.f2.accept(this, (A)"one");
      
      //Append tables of super classes to derived classes-ensure same indexing
      T.appendTables();

      //Print all vtables for all the classes
      T.printVTable();
      
      //Print basic functions
      this.printBasicInfo();

      //Generate llvm IR
      n.f0.accept(this,(A)"two");
      n.f1.accept(this, (A)"two");
      n.f2.accept(this, (A)"two");

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      String className = "";
      n.f0.accept(this, argu);
      className = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("one"))T.addClass(className);
      T.setCurrClass(className);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);     
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println();
         System.out.println("define i32 @main() {");
      }

      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tret i32 0");
         System.out.println("}");
         System.out.println();
      }

      //for the next class
      T.temp_cnt = 0;
      T.tempType.clear();
      T.unsetCurrClass();      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      String c = "";
      n.f0.accept(this, argu);
      c = n.f1.accept(this, argu).toString();
      
      if(argu.toString().equals("one")){T.addClass(c);}
      T.setCurrClass(c);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      T.unsetCurrClass();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String c = "";
      String p = "";

      n.f0.accept(this, argu);
      c = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      p = (String)n.f3.accept(this, argu);
      
      if(argu.toString().equals("one")){T.addClass(c,p);}
      T.setCurrClass(c);

      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      T.unsetCurrClass();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String type="";
      String id = "";
      type = (String)n.f0.accept(this, argu);
      id = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("one")){
         switch(T.scope){
            case 1: T.currClass.insertField(type, id);break;
            case 2: T.currFun.insertField(type, id);break;
         }
      }

      //Push fucntion declarations to method stack-kaleidoscoping
      if(argu.toString().equals("two") && T.scope == 2){
         System.out.print("\t%"+id+"  = alloca ");
         String t = type.equals("int")?"i32":type.equals("boolean")?"i1":type.equals("int[]")?"i32*":"i8*";
         System.out.println(t);
      }

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String rtype = "";
      String rval = "";
      String fName = "";
      String args = "";

      n.f0.accept(this, argu);
      rtype = (String)n.f1.accept(this, argu);
      fName = (String)n.f2.accept(this, argu);
      
      String rtype_ll = rtype.equals("int")?"i32":rtype.equals("boolean")?"i1":rtype.equals("int[]")?"i32*":"i8*";
      if(argu.toString().equals("one")){T.currClass.addFunction(rtype,fName);}
      T.setCurrFn(fName);
      
      n.f3.accept(this, argu);
      
      if(n.f4.present()){
         args = (String)n.f4.accept(this,argu);
      }
      // if(argu.toString().equals("one")){
      //    System.out.println(T.currClass.className+"::"+fName);
      //    System.out.println(T.currFun.N_args);
      //    System.out.println(T.currFun.fArg);
      //    System.out.println(T.currFun.fArgType);
      // }
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      if(argu.toString().equals("two")){

         if(args.equals(""))args = "i8* %this"; 
         else args = "i8* %this, " + args;
         System.out.println();
         System.out.println("define "+rtype_ll+" @"+T.currClass.className+"."+fName+"("+args+") {");
         
         //Allocate all variables in args onto the heap
         for(int i=0;i<this.farg.size();++i){
            String arg_id = this.farg.get(i);
            String arg_type = this.fargtype.get(i);
            System.out.println("\t%"+arg_id + " = alloca " + arg_type);
            System.out.println("\tstore "+arg_type + " %."+arg_id + ", " + arg_type + "* %"+arg_id);
         }
         
      }

      //Normal variable declarations and statements
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      rval = (String)n.f10.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tret "+rtype_ll + " " + rval);
         System.out.println("}");
         System.out.println();   
      }

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      //Remove the current function from the scope 
      T.unsetCurrFn();
      
      //Empty the argument arrays
      this.farg.clear();
      this.fargtype.clear();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      String arg = "";
      arg = (String)n.f0.accept(this, argu);
      
      if(n.f1.present()){
         for(int i=0;i<n.f1.size();++i){
            arg = arg + ", " + (String)n.f1.elementAt(i).accept(this,argu);
         }
      }

      // if(argu.toString().equals("one")){
      //    System.out.println("FPL is "+arg);
      // }
      _ret = (R)arg;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String type = "";
      String id = "";
      
      type = (String)n.f0.accept(this, argu);
      id = (String)n.f1.accept(this, argu);
      
      if(((String)argu).equals("one")){ T.currFun.addFunctionArgument(type,id);}
      
      String t = type.equals("int")?"i32":type.equals("boolean")?"i1":type.equals("int[]")?"i32*":"i8*";
      
      this.farg.add(id);
      this.fargtype.add(t);

      _ret = (R)(t + " %." + id);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)("int[]");
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = "";
      String e = "";
      // id : i1, i32, i32*, i8* 
      id = (String)n.f0.accept(this, argu); 
      n.f1.accept(this, argu);

      // e : i1,i32,i32*,i8*
      e = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if(argu.toString().equals("two")){
         if(T.currFun.isMember(id)){
            switch(T.currFun.getType(id)){
               case "boolean":
               System.out.println("\tstore i1 "+e+", i1* %"+id);
               break;
               case "int":
               System.out.println("\tstore i32 "+e+", i32* %"+id);
               break;
               case "int[]":
               System.out.println("\tstore i32* "+e+", i32** %"+id);
               break;
               default:
               System.out.println("\tstore i8* "+e+", i8** %"+id);
            }
         }
         else{
            //class field
            String rt = T.currClass.getType(id);
            String t1  = T.newTemp();
            String t2 = T.newTemp();

            System.out.println("\t"+t1+" = getelementptr i8, i8* %this, i32 "+T.currClass.getFieldIndexOffset(id) );
            System.out.print("\t"+t2+" = bitcast i8* " + t1 + " to ");
            switch(T.currClass.getType(id)){
               case "boolean":
               System.out.print("i1* \n\tstore i1 "+e+", i1* "+t2+"\n");
               break;
               case "int":
               System.out.print("i32* \n\tstore i32 "+e+", i32* "+t2+"\n");
               break;
               case "int[]":
               System.out.print("i32** \n\tstore i32* "+e+", i32** "+t2+"\n");
               break;
               default:
               System.out.print("i8** \n\tstore i8* "+e+", i8** "+t2+"\n");
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = "";
      String e1 = "";
      String e2 = "";
      String tarr = ""; String tindex = ""; String tansptr = "";
      String lyes = ""; String lno= ""; String lexit = "";

      id = (String)n.f0.accept(this, argu);

      //Dereference id into a temporary pointer
      if(argu.toString().equals("two")){
         tarr = T.newTemp();
         if(T.currFun.isMember(id)){
            //Function field-ezaf
            System.out.println("\t"+tarr+ " = load i32*, i32** %"+id);
         }
         else{
            //Class field
            //get offset in field table(have to perform the search with inclusion of type)
            String t1 = T.newTemp();
            String t2 = T.newTemp();
            System.out.println("\t"+t1+" = getelementptr i8, i8* %this, i32 "+T.currClass.getFieldIndexOffset(id));
            System.out.println("\t"+t2+" = bitcast i8* "+ t1+ " to i32**");
            System.out.println("\t"+tarr+" = load i32*, i32** "+t2);
         }
      }
      n.f1.accept(this, argu);
      //returns a temp of the proper type
      e1 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String tlen = T.newTemp();
         String tyn = T.newTemp();
         lyes = T.newLabel();
         lno = T.newLabel();
         lexit = T.newLabel();

         System.out.println("\t"+tlen + " = load i32, i32* "+tarr);
         System.out.println("\t"+tyn+" = icmp ult i32 "+e1+", "+tlen);
         System.out.println("\tbr i1 "+tyn +", label %"+lyes + ", label %"+lno + "\n");
         System.out.println(lyes+":");

         tindex = T.newTemp();
         tansptr = T.newTemp();

         System.out.println("\t"+tindex + " = add i32 "+ e1 +", 1");
         System.out.println("\t"+tansptr+ " = getelementptr i32, i32* " + tarr +", i32 "+tindex);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      //expression returns a temp always
      e2 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tstore i32 "+ e2 + ", i32* " + tansptr);
         System.out.println("\tbr label %" + lexit +"\n");
         System.out.println(lno + ":");
         System.out.println("\tcall void @throw_oob()");
         System.out.println("\tbr label %" + lexit + "\n");
         System.out.println(lexit+":");
      }

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;                                                                              
      String e = "";
      String lyes = "";
      String lno = "";

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      e = (String)n.f2.accept(this,argu);
      n.f3.accept(this, argu);
      
      if(argu.toString().equals("two")){
         lyes = T.newLabel();
         lno = T.newLabel();
         System.out.println("\tbr i1 "+e+", label %"+lyes + ", label %" + lno);
         System.out.println(lyes+":");
      }
      
      n.f4.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.println("\tbr label %"+lno);
         System.out.println(lno+":");
      }

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      String e = "";
      
      String lif = "";
      String lelse = "";
      String lfinal = "";

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      e = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(argu.toString().equals("two")){
         lif = T.newLabel();
         lelse = T.newLabel();
         lfinal = T.newLabel();
         System.out.println("\tbr i1 "+e+", label %"+lif + ", label %" + lelse);
         System.out.println(lif+":");
      }

      n.f4.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.println("\tbr label %"+lfinal + "\n");
         System.out.println(lelse+":");
      }

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tbr label %"+lfinal+"\n");
         System.out.println(lfinal+":");
         String useless_t = T.newTemp();
         System.out.println("\t"+useless_t + " = sub i32 1, 1");
      }

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String e = "";
      String lhead = "";
      String lbody = "";
      String lexit = "";

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      

      if(argu.toString().equals("two")){
         lhead = T.newLabel();
         lbody = T.newLabel();
         lexit = T.newLabel();
         System.out.println("\tbr label %"+lhead+"\n");
         System.out.println(lhead+":");
      
      }

      e =(String)n.f2.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.println("\tbr i1 " + e + ", label %"+lbody + ", label %" + lexit);
         System.out.println(lbody+":");
      }

      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tbr label %" + lhead + "\n");
         System.out.println(lexit + ":");
         String useless_t = T.newTemp();
         System.out.println("\t"+useless_t + " = sub i32 1, 1");
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      String e = "";
      String e_type_java = "";
      String e_type = "";

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      //Expression always returns temp/constant
      e = (String)n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("two")){
         
         if(T.tempType.containsKey(e)){ 
            e_type_java = T.tempType.get(e);
            e_type = e_type_java.equals("int")?"i32"
               :e_type_java.equals("boolean")?"i1"
               :e_type_java.equals("int[]")?"i32*"
               :"i8*";
         }
         else e_type = this.pexpr_type;
         
         if(e_type.equals("i1")){
            String t = T.newTemp();
            System.out.println("\t"+t+" =zext "+e_type+" "+e+" to i32 ");
            System.out.println("\tcall void (i32) @print_int(i32 "+t+")");
         }
         else{
            System.out.println("\tcall void (i32) @print_int(i32 "+e+")");

         }
         
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      //Simply return the temporary instruction
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String t1 = T.newTemp();
         // String t2 = T.newTemp();
         String t_res = T.newTemp();

         // System.out.println("\t"+t1 + " = " + pe1);
         // System.out.println("\t"+t2 + " = " + pe2);
         System.out.println("\t"+t_res + " = and i1 " + pe1 + ", " + pe2);
         _ret = (R)t_res;
         T.tempType.put(t_res, "boolean");

      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String t1 = T.newTemp();
         // String t2 = T.newTemp();
         String t_res = T.newTemp();

         // System.out.println("\t"+t1 + " = " + pe1);
         // System.out.println("\t"+t2 + " = " + pe2);
         System.out.println("\t"+t_res + " = or i1 " + pe1 + ", " + pe2);
         _ret = (R)t_res;
         T.tempType.put(t_res, "boolean");
         
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String pe1;
      String pe2;
      pe1 = pe2 = "";
      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String t1 = T.newTemp();
         // String t2 = T.newTemp();
         String t_res = T.newTemp();

         // System.out.println("\t" + t1 + " = " + pe1);
         // System.out.println("\t" + t2 + " = " + pe2);
         System.out.println("\t" + t_res + " = icmp sle i32 " + pe1 + ", " + pe2);
         _ret = (R)t_res;
         T.tempType.put(t_res, "boolean");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String pe1 = "";
      String pe2 = "";
      String pe1_t = "";
      String pe2_t = "";


      pe1 = (String)n.f0.accept(this, argu);
      if(T.tempType.containsKey(pe1)){
         String e_type_java = T.tempType.get(pe1);
         pe1_t = e_type_java.equals("int")?"i32"
               :e_type_java.equals("boolean")?"i1"
               :e_type_java.equals("int[]")?"i32*"
               :"i8*";
      }
      else pe1_t = this.pexpr_type;

      n.f1.accept(this, argu);

      pe2 = (String)n.f2.accept(this, argu);
      if(T.tempType.containsKey(pe2)){
         String e_type_java = T.tempType.get(pe2);
         pe2_t = e_type_java.equals("int")?"i32"
               :e_type_java.equals("boolean")?"i1"
               :e_type_java.equals("int[]")?"i32*"
               :"i8*";
      }
      else pe2_t = this.pexpr_type;

      if(argu.toString().equals("two")){
         if(!pe1_t.equals(pe2_t)){
            //  System.out.println("panic: type mismatch");
            // System.out.println("1:"+pe1_type+"\n2:"+pe2_type);
            // System.out.println("1:"+pe1+"\n2:"+pe2);
            // System.exit(0); 
         }
         else{
            String pt = pe1_t;
            // String t1 = T.newTemp();
            // String t2 = T.newTemp();
            String t_res = T.newTemp();
            // System.out.println("\t" + t1 + " = " + pe1);
            // System.out.println("\t" + t2 + " = " + pe2);
            System.out.println("\t"+t_res+" = icmp ne "+pt+" "+pe1 +", "+pe2);
            _ret = (R)t_res;
            T.tempType.put(t_res, "boolean");
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String tmp1 = T.newTemp();
         // String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         // System.out.println("\t"+tmp1 + " = " + pe1);
         // System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = add i32 " + pe1 + ", " + pe2);
         _ret = (R)tmp_res;
         T.tempType.put(tmp_res, "int");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      //Primary Expression returns a temporary or an integer
      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String tmp1 = T.newTemp();
         // String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         // System.out.println("\t"+tmp1 + " = " + pe1);
         // System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = sub i32 " + pe1 + ", " + pe2);
         _ret = (R)tmp_res;
         T.tempType.put(tmp_res, "int");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String tmp1 = T.newTemp();
         // String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         // System.out.println("\t"+tmp1 + " = " + pe1);
         // System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = mul i32 " + pe1 + ", " + pe2);
         _ret = (R)tmp_res;
         T.tempType.put(tmp_res, "int");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {

      //Signed division of both operands
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         // String tmp1 = T.newTemp();
         // String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         // System.out.println("\t"+tmp1 + " = " + pe1);
         // System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = sdiv i32 " + pe1 + "," + pe2);
         _ret = (R)tmp_res;
         T.tempType.put(tmp_res, "int");
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String pe1 = "";String pe2 = "";
      
      // ( pe1 : t32*) 
      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      // ( pe2 : t32)
      pe2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(argu.toString().equals("two")){
         String tlen = T.newTemp();
         String tyn = T.newTemp();
         String tindex = T.newTemp();
         String t_resptr = T.newTemp();
         String t_res = T.newTemp();

         String lno = T.newLabel();
         String lyes = T.newLabel();
         String lexit = T.newLabel();

         System.out.println("\t"+ tlen + " = load i32, i32* " + pe1);
         System.out.println("\t"+tyn + " = icmp ult i32 "+pe2+", " + tlen);
         System.out.println("\tbr i1 "+tyn+ ", label %"+lyes + ", label %"+lno);
         System.out.println(lyes+":");
         System.out.println("\t"+tindex + " = add i32 "+ pe2 +", 1");
         System.out.println("\t"+t_resptr+ " = getelementptr i32, i32* "+pe1+", i32 "+tindex);
         System.out.println("\t"+t_res+" = load i32, i32* "+ t_resptr);
         System.out.println("\tbr label %"+lexit+"\n");
         System.out.println(lno+":");
         System.out.println("\tcall void @throw_oob()");
         System.out.println("\tbr label %"+lexit+"\n");
         System.out.println(lexit+":");
         _ret = (R)t_res;
         T.tempType.put(t_res, "int");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String pe = "";

      //Primary Expression is a pointer to the array of integers
      pe = (String)n.f0.accept(this, argu);

      if(argu.toString().equals("two")){ 
         String t = T.newTemp();
         System.out.println("\t"+t+" = load i32, i32* "+ pe);
         _ret = (R)t;
         T.tempType.put(t, "int");
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {

      R _ret=null;
      String t_res = ""; 
      String t1 = ""; 
      String t2 = "";
      String t3 = "";
      String t4 = "";
      String t5 = "";

      String _objId = "";
      String _classId = "";
      String _actualClass = "";
      String _funId = "";
      String _callArgs = "";
      String rt_java = "";
      String rt_LLvm = "";

      _objId = (String)n.f0.accept(this,argu);
      _callArgs = "i8* "+_objId;

      //Assert the class of the calling object (_objId : i8*)
      if(argu.toString().equals("two")){
         if(_objId.equals("%this")){ _classId = T.currClass.className; }      
         else{ _classId = T.tempType.get(_objId); }
      }
      n.f1.accept(this,argu);
      _funId = (String)n.f2.accept(this,argu);

      n.f3.accept(this,argu);
      
      //Initialize VTable Pointers
      if(argu.toString().equals("two")){
         t1 = T.newTemp();
         t2 = T.newTemp();
         t3 = T.newTemp();
         t4 = T.newTemp();
         t5 = T.newTemp();
         
         System.out.println("\t; "+_classId+"."+_funId+" : "+T.cList.get(_classId).getVTableOffset(_funId));
         System.out.println("\t"+t1+" = bitcast i8* "+_objId+" to i8***");
         System.out.println("\t"+t2+" = load i8**, i8*** "+t1);

         //Load vtable entry of _classId corresponding to _funId
         System.out.println("\t"+t3+" = getelementptr i8*, i8** "+t2+", i32 "+T.cList.get(_classId).getVTableOffset(_funId));

         System.out.println("\t"+t4+" = load i8*, i8** "+t3);
         
         // The function need not be in cFnList of _classId, but it can still be valid -> in inherited classes
         // System.out.println(T.cList.get(_classId).cFnList);

         int _offset = T.cList.get(_classId).getVTableOffset(_funId);
         _actualClass = T.cList.get(_classId).getVTableClassAt(_offset);
         // System.out.println("Actual Class is : "+ _actualClass+"~~~");
         rt_java = T.cList.get(_actualClass).cFnList.get(_funId).rtype;
         rt_LLvm = rt_java.equals("int")?"i32":rt_java.equals("boolean")?"i1":rt_java.equals("int[]")?"i32*":"i8*";
         
         //Print argument types of the function while casting
         System.out.print("\t"+t5+" = bitcast i8* "+t4+" to " + rt_LLvm);

         //function signature must also be derived from the actual class
         String _funSig = T.cList.get(_actualClass).getArgsType(_funId);
         System.out.println(" (" + _funSig + ")* ");
      }

      if(n.f4.present()){ 
         _callArgs = _callArgs + ", "+ n.f4.accept(this,argu); 
      }

      n.f5.accept(this,argu);
      
      if(argu.toString().equals("two")){
         t_res = T.newTemp();
         System.out.println("\t"+t_res+" = call "+ rt_LLvm+" "+t5+" ( "+_callArgs + " ) ") ;
         _ret = (R)t_res;
         T.tempType.put(t_res, T.cList.get(_actualClass).cFnList.get(_funId).rtype);
      }

      // String cname = "";
      // String fname = "";
      // String return_type = "";
      // String tmp_obj = T.getNewTemp();
      // String tmp_vt = T.getNewTemp();
      // String tmp_offset = T.getNewTemp();
       
      // if(argu.toString().equals("two")){
      //    System.out.print("\nCALL");
      //    System.out.print("\n\tBEGIN");
      //    System.out.print("\nMOVE TEMP " + tmp_obj + " " );
      // }
      // //if class name is this, then im printing TEMP 0 in ThisExpression else print identifier in primary expr
      // /* cname = (String) */n.f0.accept(this, argu);                                
      // n.f1.accept(this, argu);
      // /* fname = (String) */n.f2.accept(this, argu);
      
      // if(argu.toString().equals("two")){
      //    //get the offset in the vtable where fname is present
      //    int offset = 0;
      //    //System.out.println("\n~~~~~~~~curr_class is::" + T.curr_class.className);
      //    //System.out.println("~~~~~~~~~~~`Function name::fname = "+ fname);
      //    //System.out.println("Cname is =" + cname);
      //    //if(fname.equals("GetKey"))System.out.println("In function " + T.curr_fn.functionName);
      //    //Get the returntype of the function

      //    if(cname.equals("this")){

      //       offset = T.curr_class.getVTableOffset(fname);
      //       // System.out.println("~~~~~~~~~~The vtable offset for this is=" + offset);
      //       _ret = (R)T.getReturnType(T.curr_class.className, fname);
      //    }else{
      //       //System.out.println("cname is = " + cname);
      //       offset = T.cList.get(cname).getVTableOffset(fname);
      //       _ret = (R)T.getReturnType(cname,fname);
      //    }
      //    System.out.print("\nHLOAD TEMP " + tmp_vt + " TEMP " + tmp_obj + " 0 ");
      //    System.out.print("\nHLOAD TEMP " + tmp_offset + " TEMP " + tmp_vt + " " + offset*4+ " ");
      //    System.out.print("\nRETURN TEMP " + tmp_offset+ " ");
      //    System.out.print("\nEND");
      // }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret = null;
      String _callArgs = "";
      String e_val = ""; String e_type_java = ""; String e_type = "";
      
      e_val = (String)n.f0.accept(this, argu);

      if(argu.toString().equals("two")){
 
         if(T.tempType.containsKey(e_val)){ 
            e_type_java = T.tempType.get(e_val);
            e_type = e_type_java.equals("int")?"i32"
               :e_type_java.equals("boolean")?"i1"
               :e_type_java.equals("int[]")?"i32*"
               :"i8*";
         }
         else e_type = this.pexpr_type;

         _callArgs = e_type + " " + e_val;
      }
      

      if(n.f1.present()){
         for(int i=0;i<n.f1.size();++i){
            _callArgs = _callArgs + ", " + (String)n.f1.elementAt(i).accept(this,argu);
         }
      }
      
      if(argu.toString().equals("two")){
         _ret = (R)_callArgs;
      }

      // if(((String)argu).equals("two")) 
      // {
      //     if(n.f1.present()){
      //         for(int i=0;i<n.f1.size();++i){
      //             farg +=(String)n.f1.elementAt(i).accept(this, argu);
      //         }
      //     }  
      //     _ret = (R)farg;
      // } 
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      String _arg = "";
      String e_type_java = "";
      String e_val = "";
      String e_type = "";

      n.f0.accept(this,argu);
      e_val = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("two")){
         if(T.tempType.containsKey(e_val)) {
            e_type_java = T.tempType.get(e_val);
            e_type =  e_type_java.equals("int")?"i32"
                  :e_type_java.equals("boolean")?"i1"
                  :e_type_java.equals("int[]")?"i32*"
                  :"i8*";
         }
         else e_type = this.pexpr_type;
         
         _arg = e_type + " " + e_val;
         _ret = (R)_arg;

      }      
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;

      String id = ""; 
      String rt = "";
      String t_res = "";
      
      _ret = n.f0.accept(this, argu);
      if(argu.toString().equals("two"))
      {
         id = _ret.toString();

         if(n.f0.which == 3){
            t_res = T.newTemp();
            if(T.currFun.isMember(id)){
               rt = T.currFun.getType(id);

               switch(rt){
                  case "boolean":
                     System.out.println("\t"+t_res+" = load i1, i1* %"+id);
                     T.tempType.put(t_res, "boolean");
                     break;
                  case "int":
                     System.out.println("\t"+t_res+" = load i32, i32* %"+id);
                     T.tempType.put(t_res, "int");
                     break;
                  case "int[]":
                     System.out.println("\t"+t_res+" = load i32*, i32** %"+id);
                     T.tempType.put(t_res, "int[]");
                     break;
                  default:
                     System.out.println("\t"+t_res+" = load i8*, i8** %"+id);
                     //Store the name of the class as type for t_res
                     T.tempType.put(t_res, rt);
               }               
            }
            else{
               rt = T.currClass.getType(id);
               String t1 = T.newTemp();
               String t2 = T.newTemp();
               System.out.println("\t"+t1+" = getelementptr i8, i8* %this, i32 "+T.currClass.getFieldIndexOffset(id));

               switch(rt){
                  case "boolean":
                     System.out.println("\t"+t2+" = bitcast i8* "+t1+" to i1*");
                     System.out.println("\t"+t_res+" = load i1, i1* "+t2);
                     T.tempType.put(t_res, "boolean");
                     break;
                  case "int":
                     System.out.println("\t"+t2+" = bitcast i8* "+t1+" to i32*");
                     System.out.println("\t"+t_res+" = load i32, i32* "+t2);
                     T.tempType.put(t_res, "int");
                     break;

                  case "int[]":
                     System.out.println("\t"+t2+" = bitcast i8* "+t1 + " to i32**");
                     System.out.println("\t"+t_res+" = load i32*, i32** "+t2);
                     T.tempType.put(t_res, "int[]");
                     break;

                  default:
                     System.out.println("\t"+t2+" = bitcast i8* "+t1+" to i8**");
                     System.out.println("\t"+t_res+" = load i8*, i8** "+t2);
                     T.tempType.put(t_res, rt);
               }

            }
            _ret = (R)t_res;
         }

      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=(R)"int";
      String val = "";
      val = (String)n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         //return value as it is
         this.pexpr_type = "i32";
         _ret = (R)val;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         this.pexpr_type = "i1";
         _ret = (R)"1";
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         this.pexpr_type = "i1";
         _ret = (R)"0";
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;   
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      _ret = (R)("%" + n.f0.accept(this, argu).toString());
      if(argu.toString().equals("two")){ this.pexpr_type = "i8*"; } 
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      String e = ""; String t1 = ""; String t2 = ""; String t3 = ""; String t_res = ""; String exn = ""; String alloc = "";

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      //Expression always returns a temp
      e = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(argu.toString().equals("two")){ this.pexpr_type = "i32*"; }
      if(argu.toString().equals("two")){
         t1 = T.newTemp();         
         t2 = T.newTemp();
         t3 = T.newTemp();
         t_res = T.newTemp();

         exn = T.newLabel();
         alloc = T.newLabel();

         System.out.println("\t" + t1 + " = icmp slt i32 " + e + ", 0");
         System.out.println("\tbr i1 "+t1+", label %" + exn + ", label %" + alloc);
         System.out.println(exn + ":");
         System.out.println("\tcall void @throw_oob()");
         System.out.println("\tbr label %" + alloc);
         System.out.println(alloc + ":");
         System.out.println("\t" + t2 + " = add i32 " + e + ", 1");
         System.out.println("\t" + t3 + " = call i8* @calloc(i32 4, i32 " + t2 + ")");
         System.out.println("\t" + t_res + " = bitcast i8* "+t3+" to i32* ");
         System.out.println("\tstore i32 "+e+", i32* "+t_res+" ");
         _ret = (R)t_res;
         this.pexpr_type = "i32*";
         T.tempType.put(t_res, "int[]");
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      String cname = "";
      String t_res = "";
      String t1 = "";
      String t2 = "";

      n.f0.accept(this, argu);
      cname = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(argu.toString().equals("two")){
         t_res = T.newTemp();
         t1 = T.newTemp();
         t2 = T.newTemp();

         System.out.println("\t" + t_res + " = call i8* @calloc(i32 1, i32 " +  T.cList.get(cname).cTableByteSize + ")");
         
         System.out.println("\t" + t1 + " = bitcast i8* " + t_res + " to i8***");
         
         System.out.println("\t" + t2 + " = getelementptr [" + T.cList.get(cname).vtable_size + " x i8*], [" + T.cList.get(cname).vtable_size + " x i8*]* @." + cname + "_vtable, i32 0, i32 0");
         System.out.println("\tstore i8** "+ t2 + ", i8*** " + t1);
         
         this.pexpr_type = "i8*";
         
         _ret = (R)t_res; 
         T.tempType.put(t_res, cname);
      }

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String e = "";
      n.f0.accept(this, argu);
      e = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("two")){
         String tmp = T.newTemp();
         System.out.println("\t"+tmp+" = xor i1 "+e+", 1");
         this.pexpr_type = "i1";
         _ret = (R)tmp;
         T.tempType.put(tmp, "boolean");

      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this,argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
