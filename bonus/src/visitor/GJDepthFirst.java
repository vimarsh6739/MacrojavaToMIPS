//
// Generated by JTB 1.3.2
//
/**
 * @author Vimarsh Sathia
 * @version 7.0
 */
package visitor;

import syntaxtree.*;
import java.util.*;

/**
 * We assume that the input minijava program is already type checked
 */

class SymbolTable
{
   HashMap<String,ClassTable> cList;

   int scope;//current scope
   ClassTable currClass;//current class
   FunctionTable currFun;//current function
   
   HashMap<String,Boolean> flagMap;
   int temp_cnt=0;
   int label_cnt=0;

   SymbolTable(){
      cList = new HashMap<String,ClassTable>();
      flagMap = new HashMap<String,Boolean>();
      scope=0;
      currClass=null;
      currFun=null;
   }
   
   //newTemp is local to a function
   String newTemp(){ return "%_" + Integer.toString(temp_cnt++); }
   
   //Labels are considered global
   String newLabel(){ return "l" + Integer.toString(label_cnt++);}

   //Add default class
   void addClass(String cname){
      ClassTable obj = new ClassTable(cname);
      flagMap.put(cname,false);
      cList.put(cname, obj);
   }

   void addClass(String cname, String pname)
   {
      ClassTable obj = new ClassTable(cname,pname);
      flagMap.put(cname,false);
      cList.put(cname,obj);
   }
   
   void setCurrClass(String cname){ scope = 1; currClass = cList.get(cname);   }
   void setCurrFn(String fname){ scope = 2; currFun = currClass.cFnList.get(fname); }
   void unsetCurrFn(){ scope=1; temp_cnt = 0; currFun=null;}
   void unsetCurrClass(){scope=0;  currClass=null;}

   ArrayList<String> recAppendVTable(String cname)
   {  
      ClassTable c_obj = cList.get(cname);

      if(c_obj.parentName.equals("")){
         return c_obj.getVtable();
      }
      else if(flagMap.get(cname)==true){
         return c_obj.getVtable();
      }
      else{
         ArrayList<String> vtab_parent = recAppendVTable(c_obj.parentName);
         ArrayList<String> vtab_child = c_obj.getVtable();
         
         for(int i=0;i<vtab_child.size();++i){
            boolean occursCheck=false;
            String fnInChild = vtab_child.get(i);
            fnInChild = fnInChild.substring(fnInChild.indexOf('.') + 1);

            for(int j=0;j<vtab_parent.size();++j){
               String fnInParent = vtab_parent.get(j);//what the fuck
               fnInParent = fnInParent.substring(fnInParent.indexOf('.') + 1);
               if(fnInChild.equals(fnInParent)){
                  //replace string and break
                  vtab_parent.set(j,vtab_child.get(i));
                  occursCheck=true;
                  break;
               }
            }   

            if(!occursCheck){
               //not overriding-append to the end of the list
               vtab_parent.add(vtab_child.get(i));
            }
         }

         return vtab_parent;
      }
      
   }

   //Choice is for appending types
   ArrayList<String> recAppendFieldTable(String cname,int choice){
      
      ClassTable c_obj = cList.get(cname);

      if(c_obj.parentName.equals("")){
         if(choice==1)return c_obj.getFieldTable(1);
         else return c_obj.getFieldTable(2);
      }
      else if(flagMap.get(cname)==true){
         if(choice==1)return c_obj.getFieldTable(1);
         else return c_obj.getFieldTable(2);
      }
      else{
         ArrayList<String> field_parent = recAppendFieldTable(c_obj.parentName,choice);
         ArrayList<String> field_child = c_obj.getFieldTable(choice);

         for(int i=0;i<field_child.size();++i){
            field_parent.add(field_child.get(i));            
         }

         return field_parent;
      }
   }

   void resetFlags(){
      Iterator it = flagMap.entrySet().iterator();
      while(it.hasNext()){
         Map.Entry<String, Boolean> pair = (Map.Entry<String,Boolean>) it.next();
         flagMap.replace(pair.getKey(),true,false);
      }
   }

   void appendTables(){
      //Recursively append tables of all the classes
      Iterator it = cList.entrySet().iterator();

      //Append vtables
      while (it.hasNext())
      {
         Map.Entry<String, ClassTable> pair = (Map.Entry<String,ClassTable>) it.next();
         ArrayList<String> vtable_new = this.recAppendVTable(pair.getKey());
         pair.getValue().putVTable(vtable_new);
         flagMap.replace(pair.getKey(),false,true);
         
         /* System.out.println("~~~~~~~" + pair.getKey() + "~~~~~~~~~~");
         for(int i=0;i<pair.getValue().vtable.size();++i){
            System.out.println(pair.getValue().vtable.get(i));
         }  */ 
      }
      resetFlags();
      it = cList.entrySet().iterator();
      //Append global fields
      while(it.hasNext()){
         Map.Entry<String, ClassTable> pair = (Map.Entry<String,ClassTable>) it.next();
         ArrayList<String> cfield_new = this.recAppendFieldTable(pair.getKey(),1);
         ArrayList<String> cfieldType_new = this.recAppendFieldTable(pair.getKey(),2);
         
         pair.getValue().putField(cfieldType_new,cfield_new);
         flagMap.replace(pair.getKey(),false,true);
      }
      resetFlags();
   }

   void printVTable(){
      //Prints all constructed vtables in llvm format
      cList.forEach( (cname,ctb) ->{
         System.out.print("@."+cname+"_vtable = global ");
         System.out.print("[" + ctb.vtable.size() + " x i8*] [");
         int delim=ctb.vtable_size;
         for(String cnf: ctb.vtable){
            String cn = cnf.substring(0, cnf.indexOf('.'));
            String func = cnf.substring(cnf.indexOf('.')+1);
            System.out.print("i8* bitcast (");
            //print the function signature-> rtype (args) * @cn.func to i8*
            String ret = ""; 
            switch(cList.get(cn).cFnList.get(func).rtype){
               case "int":    ret = "i32";break;
               case "boolean":ret = "i1";break;
               case "int[]":  ret = "i32*";break;
               default:ret = "i8*";
            }
            String args = cList.get(cn).getArgsType(func);
            System.out.print(ret + " (" + args + ")* @" + cn + "." + func + " to i8*)");
            if(--delim > 0 )System.out.print(", ");
         }
         System.out.print("] \n");
      });
   }

   String getReturnType(String cname, String fname){
      //We know for sure the function is present in given class or ancestor
      ClassTable c_obj  = cList.get(cname);
      if(c_obj.cFnList.containsKey(fname)){
         return c_obj.cFnList.get(fname).rtype;
      }
      else{
         return getReturnType(c_obj.parentName, fname);
      }
   }

}

class ClassTable
{

   ArrayList<String> vtable;
   HashMap<String,FunctionTable> cFnList;
   ArrayList<String> cField;
   ArrayList<String> cFieldType;
   String className;
   String parentName;
   int vtable_size;
   int classtable_size;

   ClassTable(){
      className = "";
      parentName = "";
   }

   ClassTable(String cname){
      className = cname;
      parentName = "";
      vtable = new ArrayList<String>();
      cFnList = new HashMap<String,FunctionTable>();
      cField = new ArrayList<String>();
      cFieldType = new ArrayList<String>();
      vtable_size = classtable_size = 0;
   }

   ClassTable(String cname,String pname){
      className = cname;
      parentName = pname;
      vtable = new ArrayList<String>();
      cFnList = new HashMap<String,FunctionTable>();
      cField = new ArrayList<String>();
      cFieldType = new ArrayList<String>();
      vtable_size = classtable_size = 0;

   }

   ArrayList<String> getVtable(){
      //return a deep copy of vtable
      ArrayList<String> vtable_cp = new ArrayList<String>();
      for(int i=0;i<this.vtable.size();++i){
         vtable_cp.add(this.vtable.get(i));
      }
      return vtable_cp;
   }

   ArrayList<String> getFieldTable(int choice){
      //return a deep copy of the tables
      if(choice==1){
         ArrayList<String> field_cp = new ArrayList<String>();
         for(int i=0;i<this.cField.size();++i){
            field_cp.add(this.cField.get(i));
         }
         return field_cp;
      }
      else {
         ArrayList<String> field_cp = new ArrayList<String>();
         for(int i=0;i<this.cFieldType.size();++i){
            field_cp.add(this.cFieldType.get(i));
         }
         return field_cp;
      }
   }
   
   //Add superclass fields-modify classtable_size
   void putField(ArrayList<String> type,ArrayList<String> val){
      this.cField = new ArrayList<String>();
      this.cFieldType = new ArrayList<String>();
      for(int i=0;i<val.size();++i){
         this.cField.add(val.get(i));
      }
      for(int i=0;i<type.size();++i){
         this.cFieldType.add(type.get(i));
      }
      this.classtable_size = 1 + type.size();
   }

   //Add superclass functions-modify vtable_size
   void putVTable(ArrayList<String> vtable){
      this.vtable = new ArrayList<String>();
      for(int i=0;i<vtable.size();++i){
         this.vtable.add(vtable.get(i));
      }
      this.vtable_size = vtable.size();
   }

   void insertField(String type,String id){
      cFieldType.add(type);
      cField.add(className + "." + id);
   }

   void addFunction(String rtype, String fname){
      FunctionTable obj = new FunctionTable(fname,rtype,className);
      cFnList.put(fname,obj);
      vtable.add(className+"." +fname);
   }

   int getFieldIndexOffset(String id){
      int ind = -1;
      for(int i=cField.size()-1;i>=0;--i){
         String str = cField.get(i);
         str = str.substring(str.indexOf('.')+1);
         if(id.equals(str)){
            ind = i;
            break;
         }
      }
      //System.out.println("~~~~~~~~~~offset is ~~~~~~~~```" + ind);
      return ind;
   }

   int getVTableOffset(String fname){
      int ind=-1;
      for(int i=0;i<vtable.size();++i){
         String str = vtable.get(i);
         str = str.substring(str.indexOf('.')+1);
         if(str.equals(fname)){
            ind = i;
            break;
         }
      }
      return ind;
   }

   String getType(String id){

      int ind = 1;
      for(int i=cField.size()-1;i>=0;--i){
         String str = cField.get(i);
         str = str.substring(str.indexOf('.')+1);
         if(id.equals(str)){
            ind = i;
            break;
         }
      }

      return cFieldType.get(ind);
   }

   String getVTableClassAt(int offset){
      String str = vtable.get(offset);
      return str.substring(0,str.indexOf('.')+1);
   }

   String getArgsType(String fname){
      String at = "";
      int delim = cFnList.get(fname).fArgType.size();
      for(String argi:cFnList.get(fname).fArgType){
         switch(argi){
            case "int":at = at + "i32";break;
            case "boolean":at = at + "i1";break;
            case "int[]":at = at + "i32*";break;
            default:at = at + "i8*";
         }
         if(--delim>0)at = at + ",";
      }
      return at;
   }
}

class FunctionTable
{
   ArrayList<String> fArg;
   ArrayList<String> fArgType;
   ArrayList<String> fField;
   ArrayList<String> fFieldType;

   String className;
   String functionName;
   String rtype;
   int N_args;
   int N_fields;

   FunctionTable(){}

   FunctionTable(String fname, String rtype,String className){
      functionName = fname;
      this.rtype = rtype;
      this.className = className;
      fArg = new ArrayList<String>();
      fArgType = new ArrayList<String>();
      fField = new ArrayList<String>();
      fFieldType = new ArrayList<String>();
      fArg.add("%this");
      fArgType.add(className);
      N_args=1;
      N_fields=0;
   }

   void insertField(String type,String id){
      fField.add(id);
      fFieldType.add(type);
      N_fields++;
   }

   void addFunctionArgument(String type,String id){
      fArg.add(id);
      fArgType.add(type);
      N_args++;
   }

   int getNumberArgs(){return fArg.size();}

   boolean checkField(String id){
      return (fArg.contains(id) || fField.contains(id));
   }

   int getFieldIndexTemp(String id){
      //returns the index of element containing id
      //always returns a value
      boolean flag = false;
      int ans = 0;

      for(int i=0;i<N_args;++i){
         if(fArg.get(i).equals(id)){
            flag=true;
            ans = i;
            break;
         }
      }
      if(flag){
         return ans;
      }else{

         for(int i=0;i<N_fields;++i){
            if(fField.get(i).equals(id)){
               flag=true;
               ans = i + N_args;
               break;
            }
         }

         return ans;
      }
   }

   String getType(String id){
      
      boolean flag = false;
      int ind = 0;

      for(int i=0;i<N_args;++i){
         if(fArg.get(i).equals(id)){
            flag=true;
            ind = i;
            break;
         }
      }
      if(flag){
         return fArgType.get(ind);
      }else{

         for(int i=0;i<N_fields;++i){
            if(fField.get(i).equals(id)){
               flag=true;
               ind = i;
               break;
            }
         }

         return fFieldType.get(ind);
      }
   }

}

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   //Initialize the symbol table
   SymbolTable T = new SymbolTable();

   //Store arguments of a method
   ArrayList<String> farg = new ArrayList<String>();
   ArrayList<String> fargtype = new ArrayList<String>();

   //Variable to store the type of a primary expression
   String pexpr_type = "";

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   //Return the name of the identifier
   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //Provide definitions for basic functions
   public void printBasicInfo(){
      System.out.println();
      System.out.println("declare i8* @calloc(i32, i32)");
      System.out.println("declare i32 @printf(i8*, ...)");
      System.out.println("declare void @exit(i32)\n");

      System.out.println("@_cint = constant [4 x i8] c\"%d\\0a\\00\"");
      System.out.println("@_cOOB = constant [15 x i8] c\"Out of bounds\\0a\\00\"\n");

      System.out.println("define void @print_int(i32 %i) {");
      System.out.println("\t%_str = bitcast [4 x i8]* @_cint to i8*");
      System.out.println("\tcall i32 (i8*, ...) @printf(i8* %_str, i32 %i)");
      System.out.println("\tret void");
      System.out.println("}");
      System.out.println("");
      System.out.println("define void @throw_oob() {");
      System.out.println("\t%_str = bitcast [15 x i8]* @_cOOB to i8*");
      System.out.println("\tcall i32 (i8*, ...) @printf(i8* %_str)");
      System.out.println("\tcall void @exit(i32 1)");
      System.out.println("\tret void");
      System.out.println("}");
   }

   //
   // User-generated visitor methods below
   //
   
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */

   public R visit(Goal n, A argu) {
      
      R _ret=null;

      //Build symbol tables
      n.f0.accept(this, (A)"one");
      n.f1.accept(this, (A)"one");
      n.f2.accept(this, (A)"one");
      
      //Append tables of super classes to derived classes-ensure same indexing
      T.appendTables();

      //Print all vtables for all the classes
      T.printVTable();
      
      //Print basic functions
      this.printBasicInfo();

      //Generate llvm IR
      n.f0.accept(this,(A)"two");
      n.f1.accept(this, (A)"two");
      n.f2.accept(this, (A)"two");

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      String className = "";
      n.f0.accept(this, argu);
      className = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("one"))T.addClass(className);
      T.setCurrClass(className);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);     
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("define i32 @main() {");
      }
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tret i32 0");
         System.out.println("}");
      }

      T.unsetCurrClass();      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      String c = "";
      n.f0.accept(this, argu);
      c = n.f1.accept(this, argu).toString();
      
      if(argu.toString().equals("one")){T.addClass(c);}
      T.setCurrClass(c);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      T.unsetCurrClass();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String c = "";
      String p = "";

      n.f0.accept(this, argu);
      c = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      p = (String)n.f3.accept(this, argu);
      
      if(argu.toString().equals("one")){T.addClass(c,p);}
      T.setCurrClass(c);

      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      T.unsetCurrClass();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String type="";
      String id = "";
      type = (String)n.f0.accept(this, argu);
      id = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("one")){
         switch(T.scope){
            case 1: T.currClass.insertField(type, id);break;
            case 2: T.currFun.insertField(type, id);break;
         }
      }

      //Push fucntion declarations to method stack
      if(argu.toString().equals("two") && T.scope == 2){
         System.out.print("\t%"+id+" alloca ");
         String t = type.equals("int")?"i32":type.equals("boolean")?"i1":type.equals("int[]")?"i32*":"i8*";
         System.out.println(t);
      }

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String rtype = "";
      String rval = "";
      String fName = "";
      String args = "";
      n.f0.accept(this, argu);
      rtype = (String)n.f1.accept(this, argu);
      fName = (String)n.f2.accept(this, argu);
      String rtype_ll = rtype.equals("int")?"i32":rtype.equals("boolean")?"i1":rtype.equals("int[]")?"i32*":"i8*";

      if(argu.toString().equals("one")){T.currClass.addFunction(rtype,fName);}

      T.setCurrFn(fName);
      n.f3.accept(this, argu);
      
      if(n.f4.present()){args = (String)n.f4.accept(this,argu);}
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      if(argu.toString().equals("two")){
         args = "i8* %this, " + args;
         System.out.println("define "+rtype_ll+" @"+T.currClass.className+"."+fName+"("+args+") {");
         
         //Allocate all variables in args onto the heap
         for(int i=0;i<this.farg.size();++i){
            String arg_id = this.farg.get(i);
            String arg_type = this.fargtype.get(i);
            System.out.println("\t%"+arg_id + " alloca " + arg_type);
            System.out.println("\tstore "+arg_type + " %."+arg_id + ", " + arg_type + "* %"+arg_id);
         }
         
      }

      n.f7.accept(this, argu);
      n.f8.accept(this, argu);

      n.f9.accept(this, argu);
      rval = (String)n.f10.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.println("\tret "+rtype_ll + " " + rval);
         System.out.println("}");   
      }

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      //Remove the current function from the scope 
      T.unsetCurrFn();
      this.farg.clear();
      this.fargtype.clear();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      String arg = "";
      arg = (String)n.f0.accept(this, argu);
      
      if(n.f1.present()){
         for(int i=0;i<n.f1.size();++i){
            arg = arg + ", " + n.f1.elementAt(i).accept(this,argu);
         }
      }

      n.f1.accept(this, argu);
      _ret = (R)arg;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String type = "";
      String id = "";
      
      type = (String)n.f0.accept(this, argu);
      id = (String)n.f1.accept(this, argu);
      
      if(((String)argu).equals("one")){ T.currFun.addFunctionArgument(type,id);}
      
      String t = type.equals("int")?"i32":type.equals("boolean")?"i1":type.equals("int[]")?"i32*":"i8*";
      
      this.farg.add(id);
      this.fargtype.add(t);

      _ret = (R)(t + " %." + id);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)("int[]");
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = "";
      String e = "";
      n.f0.accept(this, argu); 
      n.f1.accept(this, argu);
      if(argu.toString().equals("two")){
         
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;//String id = "";
      /* String tmp_arr =T.getNewTemp();
      String tmp_ex1 = T.getNewTemp();
      String tmp_ex2 = T.getNewTemp();
      String tmp_offset = T.getNewTemp();
      */
      /* id = (String) */n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         //Store the correct array in tmp1
         /* System.out.print("\nMOVE TEMP " + tmp_arr + " ");
         
         if(T.curr_fn.checkField(id)){
            System.out.print(" TEMP " + T.curr_fn.getFieldIndexTemp(id) + " ");
         }
         else{
            String tmp_og = T.getNewTemp();
            //its in the class list-get the appropriate entry and return
            System.out.print("\nBEGIN");
            int offset = T.curr_class.getFieldIndexOffset(id);
            System.out.print("\nHLOAD TEMP " + tmp_og + " TEMP 0 " + 4*(offset+1) + " ");
            System.out.print("\nRETURN TEMP " + tmp_og);
            System.out.print("\nEND");
         }
         System.out.print("\nMOVE TEMP "+ tmp_ex1 + " "); */
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      /* if(argu.toString().equals("two")){
         System.out.print("\nMOVE TEMP " + tmp_ex2 + " ");
      } */
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      /* if(argu.toString().equals("two")){
         System.out.print("\nHSTORE PLUS TEMP " + tmp_arr + " ");
         System.out.print(" TIMES 4 TEMP " + tmp_ex1+ " 4 " );
         System.out.print(" TEMP "+ tmp_ex2 + " ");
         System.out.print("\n");
      } */
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      String tmp1 = T.newTemp();
      String l1 = T.newLabel();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.print("\nMOVE TEMP " + tmp1 + " ");
      }
      
      n.f2.accept(this,argu);
      n.f3.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.print("\nCJUMP TEMP " + tmp1 + " " + l1  + " ");
      }
      
      n.f4.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.print("\n" + l1  + "   NOOP ");
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      String tmp1 = T.newTemp();
      String l1 = T.newLabel();
      String l2 = T.newLabel();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.print("\nMOVE TEMP " + tmp1 + " ");
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.print("\nCJUMP TEMP " + tmp1 + " " + l1  + " ");
      }
      n.f4.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.print("\nJUMP " + l2  + " ");
      }
      n.f5.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.print("\n" + l1  + "\t");
      }
      //accept else part
      n.f6.accept(this, argu);
      //goto l2 if nothing
      if(argu.toString().equals("two")){
         System.out.print("\n" + l2  + "    NOOP \n");
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String l1 = T.newLabel();
      String l2 = T.newLabel();

      if(argu.toString().equals("two")){
         System.out.print("\n" + l1 + " NOOP ");
         System.out.print("\nCJUMP  ");
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.print("\t" + l2 + " " );
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.print("\nJUMP " + l1+" ");
         System.out.print("\n" + l2  +  " NOOP " );
      }

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      String temp = "";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      //Assume that Expression always returns a temporary we can use(in this case an int temporary)
      temp = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.println("\tcall void (i32) @print_int(i32 " + temp + ")");
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      //Simply return the temporary instruction
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String t1 = T.newTemp();
         String t2 = T.newTemp();
         String t_res = T.newTemp();

         System.out.println("\t"+t1 + " = " + pe1);
         System.out.println("\t"+t2 + " = " + pe2);
         System.out.println("\t"+t_res + " = and i1 " + t1 + ", " + t2);
         _ret = (R)t_res;
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String t1 = T.newTemp();
         String t2 = T.newTemp();
         String t_res = T.newTemp();

         System.out.println("\t"+t1 + " = " + pe1);
         System.out.println("\t"+t2 + " = " + pe2);
         System.out.println("\t"+t_res + " = or i1 " + t1 + ", " + t2);
         _ret = (R)t_res;
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String pe1;
      String pe2;
      pe1 = pe2 = "";
      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String t1 = T.newTemp();
         String t2 = T.newTemp();
         String t_res = T.newTemp();

         System.out.println("\t" + t1 + " = " + pe1);
         System.out.println("\t" + t2 + " = " + pe2);
         System.out.println("\t" + t_res + " = icmp sle i32 " + t1 + ", " + t2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String pe1 = "";
      String pe2 = "";

      pe1 = (String)n.f0.accept(this, argu);
      String pe1_type = this.pexpr_type;
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);
      String pe2_type = this.pexpr_type;

      if(argu.toString().equals("two")){
         if(!pe1_type.equals(pe2_type)){
            System.out.println("panic: type mismatch");
            System.out.println("1:"+pe1_type+"\n2:"+pe2_type);
            System.out.println("1:"+pe1+"\n2:"+pe2);
            System.exit(0);
         }
         else{
            String pt = pe1_type;
            String t1 = T.newTemp();
            String t2 = T.newTemp();
            String t_res = T.newTemp();
            System.out.println("\t" + t1 + " = " + pe1);
            System.out.println("\t" + t2 + " = " + pe2);
            System.out.println("\t"+t_res+" = icmp ne "+pt+" "+t1 +", "+t2);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String tmp1 = T.newTemp();
         String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         System.out.println("\t"+tmp1 + " = " + pe1);
         System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = add i32 " + tmp1 + ", " + tmp2);
         _ret = (R)tmp_res;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String tmp1 = T.newTemp();
         String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         System.out.println("\t"+tmp1 + " = " + pe1);
         System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = sub i32 " + tmp1 + ", " + tmp2);
         _ret = (R)tmp_res;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String tmp1 = T.newTemp();
         String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         System.out.println("\t"+tmp1 + " = " + pe1);
         System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = mul i32 " + tmp1 + ", " + tmp2);
         _ret = (R)tmp_res;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {

      //Signed division of both operands
      R _ret=null;
      String pe1,pe2;
      pe1=pe2="";

      pe1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      pe2 = (String)n.f2.accept(this, argu);

      if(argu.toString().equals("two")){
         String tmp1 = T.newTemp();
         String tmp2 = T.newTemp();
         String tmp_res = T.newTemp();

         System.out.println("\t"+tmp1 + " = " + pe1);
         System.out.println("\t"+tmp2 + " = " + pe2);
         System.out.println("\t"+tmp_res + " = sdiv i32 " + tmp1 + "," + tmp2);
         _ret = (R)tmp_res;
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      /* String tmp1 = T.getNewTemp();
      String tmp2 = T.getNewTemp();
      String tmp3 = T.getNewTemp();

      if(argu.toString().equals("two")){
         System.out.print("\nBEGIN");
         System.out.print("\nMOVE TEMP " + tmp1 + " ");
      } */
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      /* //get offset
      if(argu.toString().equals("two")){
         //System.out.print("\nBEGIN");
         System.out.print("\nMOVE TEMP " + tmp2 + " ");
      } */
      n.f2.accept(this, argu);

      /* //return the element at tmp1+tmp2
      if(argu.toString().equals("two")){

         System.out.print("\nHLOAD TEMP " + tmp3 + " PLUS TEMP " + tmp1 + " PLUS 4 TIMES 4 TEMP " + tmp2 + " 0 ");
         System.out.print("\nRETURN TEMP " + tmp3 + " ");
         System.out.print("\nEND");
      } */
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      /* String tmp1 = T.getNewTemp();
      String tmp2 = T.getNewTemp();
       *//* if(argu.toString().equals("two")){
         System.out.print("\nBEGIN");
         System.out.print("\nMOVE TEMP " + tmp1 + " ");
      } */
      n.f0.accept(this, argu);
      //Just print the first element of tmp1 into temp2
      
      /* if(argu.toString().equals("two")){
         System.out.print("\nHLOAD TEMP " + tmp2 + " TEMP " + tmp1 + " 0 ");
         System.out.print("\nRETURN TEMP " + tmp2);
         System.out.print("\nEND");
      } */

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {

      R _ret=null;
      /* String cname = "";
      String fname = "";
      String return_type = "";
      String tmp_obj = T.getNewTemp();
      String tmp_vt = T.getNewTemp();
      String tmp_offset = T.getNewTemp();
       */
      /* if(argu.toString().equals("two")){
         System.out.print("\nCALL");
         System.out.print("\n\tBEGIN");
         System.out.print("\nMOVE TEMP " + tmp_obj + " " );
      } */
      //if class name is this, then im printing TEMP 0 in ThisExpression else print identifier in primary expr
      /* cname = (String) */n.f0.accept(this, argu);                                
      n.f1.accept(this, argu);
      /* fname = (String) */n.f2.accept(this, argu);
      
      if(argu.toString().equals("two")){
         /* //get the offset in the vtable where fname is present
         int offset = 0;
         //System.out.println("\n~~~~~~~~curr_class is::" + T.curr_class.className);
         //System.out.println("~~~~~~~~~~~`Function name::fname = "+ fname);
         //System.out.println("Cname is =" + cname);
         //if(fname.equals("GetKey"))System.out.println("In function " + T.curr_fn.functionName);
         //Get the returntype of the function

         if(cname.equals("this")){

            offset = T.curr_class.getVTableOffset(fname);
            // System.out.println("~~~~~~~~~~The vtable offset for this is=" + offset);
            _ret = (R)T.getReturnType(T.curr_class.className, fname);
         }else{
            //System.out.println("cname is = " + cname);
            offset = T.cList.get(cname).getVTableOffset(fname);
            _ret = (R)T.getReturnType(cname,fname);
         }
         System.out.print("\nHLOAD TEMP " + tmp_vt + " TEMP " + tmp_obj + " 0 ");
         System.out.print("\nHLOAD TEMP " + tmp_offset + " TEMP " + tmp_vt + " " + offset*4+ " ");
         System.out.print("\nRETURN TEMP " + tmp_offset+ " ");
         System.out.print("\nEND"); */
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      //if(argu.toString().equals("two"))
         //System.out.print(" ) "); 
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret = (R)"";
      String farg = (String)n.f0.accept(this, argu);
      if(((String)argu).equals("two")) 
      {
          if(n.f1.present())
          {
              for(int i=0;i<n.f1.size();++i)
              {
                  farg +=(String)n.f1.elementAt(i).accept(this, argu);
              }
          }  
          _ret = (R)farg;
      } 
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=(R)"";
      String farg = (String)n.f0.accept(this, argu);
      farg = farg + (String)n.f1.accept(this, argu);
      if(((String)argu).equals("two"))_ret = (R)farg;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         if(n.f0.which == 3){
            //Identifier
            //assert the type of identifier also here
            String id = (String)_ret;
            if(T.currFun.checkField(id)){
               //function field
            }else{
               //class field
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=(R)"int";
      String val = "";
      val = (String)n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         //return value as it is
         this.pexpr_type = "i32";
         _ret = (R)val;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         this.pexpr_type = "i1";
         _ret = (R)"1";
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         this.pexpr_type = "i1";
         _ret = (R)"0";
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;   
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)T.currClass.className;
      if(argu.toString().equals("two")){
         //Inside a function
         if(T.scope==2){

         }
         this.pexpr_type = "i8*";
         _ret = (R)"this";
      } 
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      
      String tmp1 = "";String tmp2 = "";String tmp3 = "";String tmp4 = "";
      tmp1 = T.newTemp();
      tmp2 = T.newTemp();
      tmp3 = T.newTemp();

      String l1 = T.newLabel();
      String l2 = T.newLabel();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(argu.toString().equals("two")){
         //tmp1 contains the size of the array
         System.out.print("\nBEGIN"); 
         System.out.print("\nMOVE TEMP " + tmp1 + " " );
     
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(argu.toString().equals("two")){
         //size =  tmp1+1 to array in tmp2
         System.out.print("\nMOVE TEMP " + tmp2 + " HALLOCATE  TIMES  PLUS TEMP " + tmp1 +  "  1  4 ");
         //make tmp3 as an iterator
         System.out.print("\nMOVE TEMP " +  tmp3 + " 4 ");
         System.out.print("\n"+l1 + "\tCJUMP  LE TEMP " + tmp3+" MINUS TIMES  PLUS TEMP "+tmp1+"  1  4 1 " + l2 + " "); 
         System.out.print("\nHSTORE  PLUS TEMP "+ tmp2 + " TEMP " + tmp3+  "  0  0 "); 
         System.out.print("\nMOVE TEMP " + tmp3 + "  PLUS TEMP " + tmp3 + " 4 "); 
         System.out.print("\nJUMP " + l1 + " " );
         //store the length as is in arr[0]
         System.out.print("\n" + l2 + " 	HSTORE TEMP " + tmp2 + "  0 TEMP " + tmp1 +"  "); 
         System.out.print("\nRETURN "); 
         System.out.print("\nTEMP " + tmp2 + " "); 
         System.out.print("\nEND");  
         this.pexpr_type = "i32*";
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      String class_name = "";
      n.f0.accept(this, argu);
      class_name = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(argu.toString().equals("two")){
         //get the class to be initialized
         ClassTable c_obj = T.cList.get(class_name);

         System.out.print("\nBEGIN ");
         //Initialize vtable
         String vtable_ptr = T.newTemp();
         //Initialize the classtable pointer
         String classtab_ptr = T.newTemp();
         
         System.out.print("\nMOVE TEMP " + vtable_ptr + " HALLOCATE " + (4 * c_obj.vtable_size));
         System.out.print("\nMOVE TEMP " + classtab_ptr + " HALLOCATE " + (4 * c_obj.classtable_size));
         
         for(int i=c_obj.vtable_size-1;i>=0;--i){
            System.out.print("\nHSTORE TEMP " + vtable_ptr + " " + (4*i) + " " + c_obj.vtable.get(i)+ " ");
         }

         if(c_obj.classtable_size > 1){
            //use the cjump
            String l0 = T.newLabel();
            String l1 = T.newLabel();
            String tmp3 = T.newTemp();
            System.out.print("\nMOVE TEMP " + tmp3 + " 4");
            System.out.print("\n" + l0 + "\t");
            System.out.print("CJUMP LE TEMP " + tmp3 + " " + (4*c_obj.classtable_size - 1 ) + " " + l1  +" ");
            System.out.print("\nHSTORE PLUS TEMP " + classtab_ptr + " TEMP " + tmp3 + " 0 0 ");
            System.out.print("\nMOVE TEMP " + tmp3 + " PLUS TEMP " + tmp3 + " 4 ");
            System.out.print("\nJUMP " + l0);
            System.out.print("\n" + l1 + "\t");
         }

         System.out.print("\nHSTORE TEMP "+ classtab_ptr + " 0 TEMP " + vtable_ptr);
         System.out.print("\nRETURN TEMP " + classtab_ptr);
         System.out.print("\nEND\n");
      }
      _ret = (R)class_name;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String e = "";
      n.f0.accept(this, argu);
      e = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("two")){
         String tmp = T.newTemp();
         System.out.println("\t"+tmp+" = xor i1 "+e+", 1");
         this.pexpr_type = "i1";
         _ret = (R)tmp;
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this,argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
