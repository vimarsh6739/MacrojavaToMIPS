//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

class SymTable {
   
   HashMap<String,MethodTable> procList;
   //current procedure scope
   MethodTable curr;

   SymbolTable() {
      procList = new HashMap<>();
      curr = null;
   }
   
   //Add Procedure 
   void addMethod(String fname, String nargs){
      MethodTable new_proc = new MethodTable(fname,nargs);
      procList.put(fname, new_proc);   
   }

   void setScope(String fname){
      curr = procList.get(fname);
   }

   void resetScope(){
      curr = null;
   }
}

class MethodTable{
   
   String fname;
   String nargs;

   //Nodes with labels will be indexed by both Hashmaps
   LinkedHashMap<Integer,BasicBlock>  allBlocks;
   LinkedHashMap<String,BasicBlock> labelBlocks; 

   //current line counter
   int pc;

   //curr basic block
   BasicBlock curr_block;
   String curr_label;

   MethodTable(){
      fname = null;
      nargs =0 ;
      allBlocks = new LinkedHashMap<Integer,BasicBlock>();
      labelBlocks = new LinkedHashMap<String,BasicBlock>();
      pc=0;
      curr_label = null;
   }

   MethodTable(String fname, String nargs){
      this.fname = fname;
      this.nargs = nargs;
      allBlocks = new LinkedHashMap<Integer,BasicBlock>();
      labelBlocks = new LinkedHashMap<String, BasicBlock  >();
      ///starting label
      pc=1;
      curr_label = null;
   }

   void addLabel(String label){
      BasicBlock node = new BasicBlock(label);
      labelBlocks.put(label,node);
   }

   void setLabel(String label){
      curr_label = label;
   }

   void resetLabel(){
      curr_label = null;
   }

   void setBlock(int hashCode){
      curr_block = allBlocks.get(Integer.valueOf(hashCode));
   }

   void resetBlock(){
      curr_block = null;
   }

   int addBasicBlock(){
      BasicBlock node;
      if(curr_label!=null){
         node = labelBlocks.get(curr_label);
      }else{
         node = new BasicBlock();
      }
      allBlocks.put(Integer.valueOf(pc++), node);

      return (pc-1);
   }

}

class BasicBlock{
   
   //Define use,def, in and out nodes
   String label;
   HashSet<String> use;
   HashSet<String> def;
   HashSet<BasicBlock> in;
   HashSet<BasicBlock> out;

   BasicBlock(){
      //unlabelled block
      this.label = "";
      use = new HashSet<>();
      def = new HashSet<>();
      in = new HashSet<>();
      out = new HashSet<>();
   }

   BasicBlock(String label){
      //labelled block
      this.label = label;
      use = new HashSet<>();
      def = new HashSet<>();
      in = new HashSet<>();
      out = new HashSet<>();
   }

   void addUse(String temp){
      this.use.put(temp);
   }

   void addDef(String temp){
      this.def.put(temp);
   }
}

@SuppressWarnings("unchecked")
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   SymTable T = new SymTable();
   
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      n.f0.accept(this,"1");
      T.addMethod("MAIN", "0");
      n.f1.accept(this,"1");
      n.f2.accept(this,"1");
      //Do liveness analysis here 
      
      

      n.f3.accept(this,"1");
      n.f4.accept(this,"1");

      //complete second pass for code generation
      
      n.f0.accept(this,"2");
      n.f1.accept(this,"2");
      n.f2.accept(this,"2");
      n.f3.accept(this,"2");
      n.f4.accept(this,"2");
   
     
     return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      String label = "";
      //Check if Statement is present

      if(n.f0.present()){
         //Check if a label is there
         for(int i=0;i<n.f0.size();++i){
            //Check the NodeSequence
            if(((NodeOptional)((NodeSequence)n.f0.elementAt(i)).elementAt(0)).present()){
               label = (String) ((NodeSequence)n.f0.elementAt(i)).elementAt(0).accept(this,argu);
               if(argu.toString().equals("1")){
                  T.curr.addLabelBlock(label,true);
               }
            }  
            //Accept the given Statement
            ((NodeSequence)n.f0.elementAt(i)).elementAt(1).accept(this,argu);
            
         }
      }

      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String fname = "";
      String nargs = "";
      switch(argu.toString()){
         
         case "1": 
         fname = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         nargs = (String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         T.addMethod(fname, nargs);
         n.f4.accept(this, argu);

         //Do liveness analysis

         //Do register allocation


         break;

         case "2":
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         break;
      }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      int index=0;
      if(argu.toString().equals("1"){
         index = T.curr.addBasicBlock();
         T.curr.setBlock(index);
      }
      
      n.f0.accept(this, argu);
      
      if(argu.toString().equals("1"){
         T.curr.resetBlock();
      }

      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      int index=0;
      if(argu.toString().equals("1"){
         index = T.curr.addBasicBlock();
         T.curr.setBlock(index);
      }

      n.f0.accept(this, argu);
      
      if(argu.toString().equals("1"){
         T.curr.resetBlock();
      }

      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      int index = 0;
      String label = "";
      if(argu.toString().equals("1"){
         index = T.curr.addBasicBlock();
         T.curr.setBlock(index);
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(argu.toString().equals("1")){
         T.curr.addLabel(label);
         T.curr.resetBlock();
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(argu.toString().equals("1"))T.curr.addBasicBlock();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

}
