//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   static int temp_cnt = 0;
   static int label_cnt = 0;

   int temp_max = 0;

   public void init(){
      temp_cnt = temp_max+1;
   }

   public String getTemp(){
      return String.valueOf(temp_cnt++);
   }

   public String getLabel(){
      return "L" + String.valueOf(label_cnt++);
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"one");
      n.f1.accept(this, (A)"one");
      n.f2.accept(this, (A)"one");
      n.f3.accept(this, (A)"one");
      n.f4.accept(this, (A)"one");

      //Initialize temp and label
      this.init();

      //Emit microIR
      n.f0.accept(this, (A)"two");

      System.out.print("\nMAIN");
      
      n.f1.accept(this, (A)"two");
      n.f2.accept(this, (A)"two");
      
      System.out.print("\nEND");
      
      n.f3.accept(this, (A)"two");
      n.f4.accept(this, (A)"two");
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      //Return Nothing
      R _ret=null;
      String label = "";
      //n.f0 is NodeListOptional
      if(n.f0.present()){
         //Check if a label is there, if yes print it
         for(int i=0;i<n.f0.size();++i){
            //Check the NodeSequence
            if(((NodeOptional)((NodeSequence)n.f0.elementAt(i)).elementAt(0)).present()){
               label = (String) ((NodeSequence)n.f0.elementAt(i)).elementAt(0).accept(this,argu);
               if(argu.toString().equals("two")){
                  System.out.print("\n"+label+" ");
               }
            }  
            //Accept the given Statement
            ((NodeSequence)n.f0.elementAt(i)).elementAt(1).accept(this,argu);

         }
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null; 
      String val = "";
      String label = "";
      switch(argu.toString()){
         case "one":

         label = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         val = (String)n.f2.accept(this, argu);
         temp_max = Math.max(temp_max, Integer.parseInt(val));
         n.f3.accept(this, argu);
         n.f4.accept(this,argu);

         break;
         
         case "two":
         label = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         val = (String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.print("\n"+label+" [ "+val+" ] ");
         n.f4.accept(this,(A)("three"));
         break;

         default:
         //Do Nothing
      }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) { 
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.print("\n\t\tNOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu.toString().equals("two")){
         System.out.print("\n\t\tERROR");
      }
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String inst1 = "";String inst2 = "";
      n.f0.accept(this, argu);
      inst1 = (String)n.f1.accept(this, argu);
      inst2 = (String)n.f2.accept(this, argu);
      
      if(argu.toString().equals("two")){

         System.out.print("\n\t\tCJUMP "+inst1+" "+inst2+" ");   
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;String label = "";
      n.f0.accept(this, argu);
      label = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.print("\n\t\tJUMP "+label);
      }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String inst0,inst1,inst2,inst3;
      inst0=inst1=inst2=inst3="";
      inst0=(String)n.f0.accept(this, argu);
      inst1=(String)n.f1.accept(this, argu);
      inst2=(String)n.f2.accept(this, argu);
      inst3=(String)n.f3.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.print("\n\t"+inst0+" "+inst1+" "+inst2+" "+inst3+" ");
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String inst0,inst1,inst2,inst3;
      inst0=inst1=inst2=inst3="";
      inst0=(String)n.f0.accept(this, argu);
      inst1=(String)n.f1.accept(this, argu);
      inst2=(String)n.f2.accept(this, argu);
      inst3=(String)n.f3.accept(this, argu);

      if(argu.toString().equals("two")){
         System.out.print("\n\t"+inst0+" "+inst1+" "+inst2+" "+inst3+" ");
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String inst1 = "";
      String inst2 = "";
      n.f0.accept(this, argu);
      inst1 = (String)n.f1.accept(this, argu);
      inst2 = (String)n.f2.accept(this, argu);
      
      if(argu.toString().equals("two")){
         System.out.print("\n\tMOVE "+inst1+" "+inst2+" ");
      }

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String inst = "";
      
      n.f0.accept(this, argu);
      inst = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("two")){

         String tmp = this.getTemp();
         System.out.print("\n\tMOVE TEMP " +tmp+ " " + inst);
         System.out.print("\n\tPRINT TEMP " +tmp+ " ");
      }
      
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      
      if(argu.toString().equals("two")){
         if(n.f0.which==5){
            String val = _ret.toString();
            String tmp = this.getTemp();
            System.out.print("\n\tMOVE TEMP "+tmp+" "+val);
            _ret=(R)("TEMP "+tmp);
         }
         if(n.f0.which==6){
            String label = _ret.toString();
            String tmp = this.getTemp();
            System.out.print("\n\tMOVE TEMP "+tmp+" "+label);
            _ret = (R)("TEMP "+tmp);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      String inst0 = "";
      String inst1 = "";
      String inst2 = "";
      String inst3 = "";
      String inst4 = "";
      switch(argu.toString()){
         case "one":
         //Pass 1
         n.f0.accept(this,argu);
         n.f1.accept(this,argu);
         n.f2.accept(this,argu);
         n.f3.accept(this,argu);
         n.f4.accept(this,argu);
         break;

         case "two":
         //Called from Exp
         
         inst0 = (String)n.f0.accept(this,argu);
         inst1 = (String)n.f1.accept(this,argu);
         inst2 = (String)n.f2.accept(this,argu);
         inst3 = (String)n.f3.accept(this,argu);
         inst4 = (String)n.f4.accept(this,argu);

         String tmp = this.getTemp();
         System.out.print("\n\tMOVE TEMP " + tmp + " " + inst3 + " ");
         _ret = (R)("TEMP "+tmp+" ");
         break;
         
         case "three":
         //Called from Procedure in pass2
         
         inst0 = (String)n.f0.accept(this,(A)("two"));
         System.out.print("\nBEGIN");
         inst1 = (String)n.f1.accept(this,(A)("two"));
         inst2 = (String)n.f2.accept(this,(A)("two"));
         inst3 = (String)n.f3.accept(this,(A)("two"));
         System.out.print("\nRETURN "+inst3+" ");
         inst4 = (String)n.f4.accept(this,(A)("two"));
         System.out.print("\nEND");
         break;
         default:
         //Do nothing
      }

      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      String inst2 = "";
      String inst4 = "";
      
      n.f0.accept(this, argu);
      inst2 = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      //accept all expressions
      if(n.f3.present()){
         for(int i=0;i<n.f3.size();++i){
            inst4+=(String)n.f3.elementAt(i).accept(this,argu) + " ";
         }
      }
      n.f4.accept(this, argu);
      
      if(argu.toString().equals("two")){
         String tmp1 = this.getTemp();
         System.out.print("\n\tMOVE TEMP "+tmp1+" ");
         System.out.print("CALL "+inst2+" ");
         System.out.print(" ( "+inst4+" ) ");
         _ret = (R)("TEMP "+tmp1);
      }

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String inst2 = "";
      n.f0.accept(this, argu);
      inst2 = (String)n.f1.accept(this, argu);
      
      if(argu.toString().equals("two")){
         String tmp = this.getTemp();
         System.out.print("\n\tMOVE TEMP "+tmp+" ");
         System.out.print("HALLOCATE "+ inst2+" ");
         _ret = (R)("TEMP "+tmp);
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      
      String inst1 = "";
      String inst2 = "";
      String inst3 = "";

      inst1 = (String)n.f0.accept(this, argu);//returns operator
      inst2 = (String)n.f1.accept(this, argu);//returns temp
      inst3 = (String)n.f2.accept(this, argu);//returns temp

      if(argu.toString().equals("two")){
         /* String tmp1 = this.getTemp();
         String tmp2 = this.getTemp(); */
         String tmp = this.getTemp();
         /* System.out.print("\n\tMOVE TEMP "+tmp1+" "+inst2);
         System.out.print("\n\tMOVE TEMP "+tmp2+" "+inst3); */
         System.out.print("\n\tMOVE TEMP "+tmp+" ");
         System.out.print("\t"+inst1+" "+inst2+" "+inst3+" ");

         _ret = (R)("TEMP "+tmp+" ");
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;String val  = "";
      n.f0.accept(this, argu);
      val = (String)n.f1.accept(this, argu);

      if(argu.toString().equals("one")){
         temp_max = Math.max(temp_max, Integer.parseInt(val));
      }
      _ret = (R)("TEMP "+val+" ");
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

}
